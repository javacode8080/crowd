<?xml version="1.0" encoding="UTF-8"?>

<web-app version="2.4"
         xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

    <!-- 配置 ContextLoaderListener 加载 Spring 配置文件 -->
    <!-- needed for ContextLoaderListener -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring-persist-*.xml</param-value>
    </context-param>

    <!-- Bootstraps the root web application context before servlet initialization -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>


    <!-- 配置 CharacterEncodingFilter 解决 POST 请求的字符乱码问题 -->
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!-- 指定字符集 -->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <!-- 强制请求进行编码 -->
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <!-- 强制响应进行编码 -->
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <!--注：这个filter执行的顺序必须在所有的filter前面-->
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <!-- 配置 SpringMVC 的前端控制器 -->
    <!-- The front controller of this Spring Web application, responsible for handling all application
    requests -->
    <servlet>
        <servlet-name>springDispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- 以初始化参数的形式指定 SpringMVC 配置文件的位置 -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-web-mvc.xml</param-value>
        </init-param>
        <!-- 让 DispatcherServlet 在 Web 应用启动时创建对象、 初始化 -->
        <!-- 默认情况： Servlet 在第一次请求的时候创建对象、 初始化 -->
        <!--Servlet默认生命周期中，创建对象是第一次接受到请求（启动tomcat），
        而DispatcherServlet创建对象之后有大量的“框架初始化工作”，不适合在第一次请求时来做
        设置<load-on-startup>就是为了让DispatcherServlet在web应用启动的时候创建对象，初始化-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <!-- Map all requests to the DispatcherServlet for handling -->
    <servlet-mapping>
        <servlet-name>springDispatcherServlet</servlet-name>
        <!-- DispatcherServlet 映射的 URL 地址 -->
        <!-- 大白话： 什么样的访问地址会交给 SpringMVC 来处理 -->
        <!-- 配置方式一： 符合 RESTFUL 风格使用“/”：拦截所有请求 -->
        <!-- <url-pattern>/</url-pattern> -->
        <!-- 配置方式二： 请求扩展名
        优点：
                ①：静态资源.css/.js/.png等完全不经过SpringMvc，不需要特殊处理
                ②：实现伪静态效果，表面上看起来是访问HTML静态页面，实际上是经过java代码动态运算的动态页面
                    伪静态优点：1.给黑客入侵增加难度【因为所有的不管是静态资源还是动态资源动用html为后缀实现，外人看不出来】。
                              2.有利于SEO优化【让百度谷歌等这样的搜索引擎更容易找到我们的项目】
         缺点：不符合RESTful风格【那么这里面HiddenHttpMethodFilter配不配之就不重要了】
        -->
        <url-pattern>*.html</url-pattern>
        <!--如果一个Ajax请求扩展名是html，但是实际上服务器要返回的是一个json数据，二者不匹配，出现406错误-->
        <!--为了让Ajax请求能够顺利的拿到JSON格式的响应数据，我们另外配置JSON扩展名-->
    </servlet-mapping>
    <!-- Map all requests to the DispatcherServlet for handling -->
    <servlet-mapping>
        <servlet-name>springDispatcherServlet</servlet-name>
        <!-- DispatcherServlet 映射的 URL 地址 -->
        <!-- 大白话： 什么样的访问地址会交给 SpringMVC 来处理 -->
        <!-- 配置方式一： 符合 RESTFUL 风格使用“/”：拦截所有请求 -->
        <!-- <url-pattern>/</url-pattern> -->
        <!-- 配置方式二： 请求扩展名
        优点：
                ①：静态资源.css/.js/.png等完全不经过SpringMvc，不需要特殊处理
                ②：实现伪静态效果，表面上看起来是访问HTML静态页面，实际上是经过java代码动态运算的动态页面
                    伪静态优点：1.给黑客入侵增加难度【因为所有的不管是静态资源还是动态资源动用html为后缀实现，外人看不出来】。
                              2.有利于SEO优化【让百度谷歌等这样的搜索引擎更容易找到我们的项目】
         缺点：不符合RESTful风格【那么这里面HiddenHttpMethodFilter配不配之就不重要了】
        -->
        <!--如果一个Ajax请求扩展名是html，但是实际上服务器要返回的是一个json数据，二者不匹配，出现406错误-->
        <!--为了让Ajax请求能够顺利的拿到JSON格式的响应数据，我们另外配置JSON扩展名-->
        <url-pattern>*.json</url-pattern>
    </servlet-mapping>
    <!--SpringSecurity 会根据 DelegatingFilterProxy 的 filter-name 到 IOC 容器中
    查找所需要的 bean。 所以 filter-name 必须是 springSecurityFilterChain 名字。-->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>
        