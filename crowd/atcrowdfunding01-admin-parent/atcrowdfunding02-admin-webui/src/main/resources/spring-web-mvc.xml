<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 配置自动扫描的包 -->
    <context:component-scan base-package="com.company.crowd.mvc"/>
    <!-- 配置视图解析器 -->
    <!-- 拼接公式→前缀+逻辑视图+后缀=物理视图 -->
    <!--
    @RequestMapping("/xxx/xxx")
    public String xxx() {
    // 这个返回值就是逻辑视图
    return "target";
    } 物
    理视图是一个可以直接转发过去的地址
    物理视图： "/WEB-INF/"+"target"+".jsp"
    转发路径： "/WEB-INF/target.jsp"
    如果COntroller仅仅实现一个跳转，方法内部无任何内容的时候，可以考虑使用下面的标签实现
    <mvc:view-controller path="/xxx/xxx.html" view-name="target"></mvc:view-controller>其中path是请求地址，view-name是跳转页面
    -->

    <bean id="viewResolver"
          class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 前缀： 附加到逻辑视图名称前 -->
        <property name="prefix" value="/WEB-INF/"/>
        <!-- 后缀： 附加到逻辑视图名称后 -->
        <property name="suffix" value=".jsp"/>
    </bean>
    <!-- 启用注解驱动 -->
    <mvc:annotation-driven/>
    <!-- 配置基于 XML 的异常映射-->
    <bean id="simpleMappingExceptionResolver"
          class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <!-- 配置异常类型和具体视图页面的对应关系 -->
        <property name="exceptionMappings">
            <props>
                <!-- key 属性指定异常全类名 -->
                <!-- 标签体中写对应的视图（这个值要拼前后缀得到具体路径） -->
                <prop key="java.lang.Exception">system-error</prop>
                <prop key="com.company.crowd.exception.AccessForbiddenException">admin-login</prop>
                <prop key="com.company.crowd.exception.LoginAcctAlreadyInUseException">admin-add</prop>
            </props>
        </property>
    </bean>
    <!--等效于
        @RequestMapping("/admin/to/login/page.html")
        public String toLoginPage(){
            return "admin-login";
        }
    -->
    <mvc:view-controller path="/admin/to/login/page.html" view-name="admin-login"/>
    <mvc:view-controller path="/admin/to/main/page.html" view-name="admin-main"/><!--重定向跳转-->
    <mvc:view-controller path="/admin/to/add/page.html" view-name="admin-add"/>
    <!--<mvc:view-controller path="/role/to/page.html" view-name="role-page"/>-->
    <mvc:view-controller path="/menu/to/page.html" view-name="menu-page"/>
    <!-- 注册拦截器：实现资源访问权限控制，引入了SpringSecurity之后就不需要这个了 -->
<!--    <mvc:interceptors>
        <mvc:interceptor>
            &lt;!&ndash; mvc:mapping 配置要拦截的资源 &ndash;&gt;
            &lt;!&ndash; /*对应一层路径， 比如： /aaa &ndash;&gt;
            &lt;!&ndash; /**对应多层路径， 比如： /aaa/bbb 或/aaa/bbb/ccc 或/aaa/bbb/ccc/ddd &ndash;&gt;
            <mvc:mapping path="/**"/>
            &lt;!&ndash; mvc:exclude-mapping 配置不拦截的资源 &ndash;&gt;
            <mvc:exclude-mapping path="/admin/to/login/page.html"/>
            <mvc:exclude-mapping path="/admin/do/login.html"/>
            <mvc:exclude-mapping path="/admin/do/logout.html"/>
            &lt;!&ndash; 配置拦截器类 &ndash;&gt;
            <bean class="com.company.crowd.mvc.interceptor.LoginInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>-->
</beans>